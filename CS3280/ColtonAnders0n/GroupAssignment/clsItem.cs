using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace GroupAssignment
{
    /// <summary>
    /// The item class.
    /// </summary>
    public class clsItem : INotifyPropertyChanged
    {
        #region Attributes
        /// <summary>
        /// An item ID auto-generated by the database.
        /// </summary>
        private int iProductID;

        /// <summary>
        /// An item's name.
        /// </summary>
        private string sProductName;

        /// <summary>
        /// An item's description.
        /// </summary>
        private string sProductDescription;

        /// <summary>
        /// An item's cost.
        /// </summary>
        private double dProductPrice;

        /// <summary>
        /// Indicates if an item is part of an invoice.
        /// </summary>
        private bool bProductActive;

        /// <summary>
        /// This event gets raised any time one of the item properties are changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;
        #endregion Attributes

        #region Constructor(s)
        /// <summary>
        /// Default constructor for clsItem.
        /// </summary>
        public clsItem()
        {
            try
            {
                iProductID = 0;
                sProductName = "";
                sProductDescription = "";
                bProductActive = false;
            }
            catch (Exception ex)
            {
                throw new Exception(MethodInfo.GetCurrentMethod().DeclaringType.Name + "." + MethodInfo.GetCurrentMethod().Name + " -> " + ex.Message);
            }

        }

        /// <summary>
        /// Overloaded constructor that allows you to pass in the attributes
        /// </summary>
        /// <param name="productID">Product ID (corresponding to ID from database)</param>
        /// <param name="productName">Name of the product</param>
        /// <param name="productDescription">Description of the product</param>
        /// <param name="itemPrice">Price of the Product</param>
        /// <param name="productActive">Indicates if the product is active</param>
        public clsItem(int productID, string productName, string productDescription, double itemPrice, bool productActive)
        {
            this.SProductID = productID;
            this.SProductName = productName;
            this.SProductDescription = productDescription;
            this.DProductPrice = itemPrice;
            this.BProductActive = productActive;
        }
        #endregion Constructor(s)

        #region Properties
        /// <summary>
        /// An item ID auto-generated by the database.
        /// </summary>
        public int SProductID
        {
            get
            {
                return iProductID;
            }
            set
            {
                iProductID = value;
            }
        }

        /// <summary>
        /// An item's name.
        /// </summary>
        public string SProductName
        {
            get
            {
                return sProductName;
            }
            set
            {
                sProductName = value;

                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs("SProductName"));
                }
            }
        }

        /// <summary>
        /// An item's description.
        /// </summary>
        public string SProductDescription
        {
            get
            {
                return sProductDescription;
            }
            set
            {
                sProductDescription = value;

                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs("SProductDescription"));
                }
            }
        }

        /// <summary>
        /// An item's cost.
        /// </summary>
        public double DProductPrice
        {
            get
            {
                return Math.Round(dProductPrice, 2);
            }
            set
            {
                dProductPrice = value;

                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs("DProductPrice"));
                }
            }
        }

        /// <summary>
        /// Indicates if an item is part of an invoice.
        /// </summary>
        public bool BProductActive
        {
            get
            {
                return bProductActive;
            }
            set
            {
                bProductActive = value;

                if (PropertyChanged != null)
                {
                    PropertyChanged(this, new PropertyChangedEventArgs("BProductActive"));
                }
            }
        }
        #endregion Properties

        #region To string override

        /// <summary>
        /// Formats data to be displayed in the combo box correctly
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            //return firstName + " " + lastName;
            return SProductName;
        }

        #endregion
    }
}
